
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 04 13:58:05 CET 2024
//----------------------------------------------------

package asint_asc;

import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.Symbol;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 04 13:58:05 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\006\000\002\006\005\000" +
    "\002\006\004\000\002\015\005\000\002\016\003\000\002" +
    "\016\002\000\002\017\005\000\002\017\003\000\002\022" +
    "\005\000\002\022\004\000\002\007\003\000\002\010\006" +
    "\000\002\010\003\000\002\011\004\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\037" +
    "\005\000\002\037\003\000\002\020\004\000\002\013\003" +
    "\000\002\013\002\000\002\014\005\000\002\014\003\000" +
    "\002\021\004\000\002\021\005\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\005\000\002\021\007\000\002\021\005" +
    "\000\002\021\003\000\002\040\005\000\002\041\003\000" +
    "\002\041\002\000\002\042\005\000\002\042\003\000\002" +
    "\043\003\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\030\004\000\002\030\003\000\002\031\004\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\005\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\005\000\002\036\004\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\032\006\001\002\000\004\002\217\001" +
    "\002\000\004\002\001\001\002\000\052\024\023\025\026" +
    "\026\012\027\010\030\025\031\007\032\ufffd\033\ufffd\042" +
    "\ufffd\043\ufffd\045\022\046\024\047\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\066\013\001\002\000" +
    "\004\032\207\001\002\000\010\015\uffe8\030\uffe8\056\uffe8" +
    "\001\002\000\030\032\006\033\uffe1\042\073\043\060\047" +
    "\061\050\063\051\067\052\071\053\070\054\066\055\057" +
    "\001\002\000\010\015\uffe9\030\uffe9\056\uffe9\001\002\000" +
    "\020\024\023\025\026\026\012\027\010\030\025\031\007" +
    "\066\013\001\002\000\010\015\uffec\030\uffec\056\uffec\001" +
    "\002\000\010\015\uffee\030\uffee\056\uffee\001\002\000\006" +
    "\004\ufffb\006\ufffb\001\002\000\010\015\053\030\ufff0\056" +
    "\ufff0\001\002\000\006\004\050\006\051\001\002\000\004" +
    "\030\047\001\002\000\004\030\031\001\002\000\010\015" +
    "\uffeb\030\uffeb\056\uffeb\001\002\000\020\024\023\025\026" +
    "\026\012\027\010\030\025\031\007\066\013\001\002\000" +
    "\010\015\uffe7\030\uffe7\056\uffe7\001\002\000\010\015\uffea" +
    "\030\uffea\056\uffea\001\002\000\004\030\030\001\002\000" +
    "\006\004\ufff9\006\ufff9\001\002\000\004\021\032\001\002" +
    "\000\022\022\ufff5\024\023\025\026\026\012\027\010\030" +
    "\025\031\007\066\013\001\002\000\004\032\006\001\002" +
    "\000\006\004\ufffa\006\ufffa\001\002\000\006\022\ufff3\023" +
    "\ufff3\001\002\000\006\022\ufff6\023\045\001\002\000\006" +
    "\030\043\056\042\001\002\000\004\022\041\001\002\000" +
    "\004\032\ufff7\001\002\000\004\030\044\001\002\000\006" +
    "\022\ufff1\023\ufff1\001\002\000\006\022\ufff2\023\ufff2\001" +
    "\002\000\020\024\023\025\026\026\012\027\010\030\025" +
    "\031\007\066\013\001\002\000\006\022\ufff4\023\ufff4\001" +
    "\002\000\006\004\ufff8\006\ufff8\001\002\000\030\032\ufffe" +
    "\033\ufffe\042\ufffe\043\ufffe\047\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\053\ufffe\054\ufffe\055\ufffe\001\002\000\024\024\023" +
    "\025\026\026\012\027\010\030\025\031\007\045\022\046" +
    "\024\066\013\001\002\000\006\004\ufffc\006\ufffc\001\002" +
    "\000\004\017\054\001\002\000\004\016\055\001\002\000" +
    "\010\015\uffef\030\uffef\056\uffef\001\002\000\010\015\uffed" +
    "\030\uffed\056\uffed\001\002\000\006\006\uffdc\033\uffdc\001" +
    "\002\000\026\017\111\021\077\030\113\035\117\041\074" +
    "\061\110\062\116\063\101\064\112\065\115\001\002\000" +
    "\004\030\172\001\002\000\006\006\uffd4\033\uffd4\001\002" +
    "\000\026\017\111\021\077\030\113\035\117\041\074\061" +
    "\110\062\116\063\101\064\112\065\115\001\002\000\004" +
    "\033\170\001\002\000\006\006\uffdf\033\uffdf\001\002\000" +
    "\026\017\111\021\077\030\113\035\117\041\074\061\110" +
    "\062\116\063\101\064\112\065\115\001\002\000\026\017" +
    "\111\021\077\030\113\035\117\041\074\061\110\062\116" +
    "\063\101\064\112\065\115\001\002\000\026\017\111\021" +
    "\077\030\113\035\117\041\074\061\110\062\116\063\101" +
    "\064\112\065\115\001\002\000\026\017\111\021\077\030" +
    "\113\035\117\041\074\061\110\062\116\063\101\064\112" +
    "\065\115\001\002\000\006\006\161\033\uffe2\001\002\000" +
    "\026\017\111\021\077\030\113\035\117\041\074\061\110" +
    "\062\116\063\101\064\112\065\115\001\002\000\026\017" +
    "\uffab\021\uffab\030\uffab\035\uffab\041\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\065\uffab\001\002\000\006\006\uffde\033" +
    "\uffde\001\002\000\060\005\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\020" +
    "\uffbe\022\uffbe\023\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\057\uffbe\060\uffbe\066\uffbe\001" +
    "\002\000\026\017\111\021\077\030\113\035\117\041\074" +
    "\061\110\062\116\063\101\064\112\065\115\001\002\000" +
    "\060\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\151\016\uffc0\020\150\022\uffc0\023" +
    "\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\057\uffc0\060\uffc0\066\153\001\002\000\060\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\020\uffb9\022\uffb9\023\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\057\uffb9\060\uffb9\066\uffb9\001\002\000\052\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\016\uffc2\022\uffc2\023\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\057\uffc2\060\uffc2\001\002" +
    "\000\052\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\022\uffc4\023\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\141\037\143\040\142\057" +
    "\137\060\144\001\002\000\040\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7\022" +
    "\uffc7\023\uffc7\032\uffc7\033\uffc7\034\uffc7\035\135\001\002" +
    "\000\036\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\016\uffca\022\uffca\023\uffca\032\uffca" +
    "\033\uffca\034\132\001\002\000\034\005\121\006\uffcc\007" +
    "\125\010\127\011\126\012\130\013\122\014\124\016\uffcc" +
    "\022\uffcc\023\uffcc\032\uffcc\033\uffcc\001\002\000\014\006" +
    "\uffce\022\uffce\023\uffce\032\uffce\033\uffce\001\002\000\060" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\057\uffbd\060\uffbd\066\uffbd\001\002\000\060\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\020\uffbc\022\uffbc\023\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\057" +
    "\uffbc\060\uffbc\066\uffbc\001\002\000\060\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\020\uffb8\022\uffb8\023\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\057\uffb8\060" +
    "\uffb8\066\uffb8\001\002\000\060\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\020\uffbb\022\uffbb\023\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\057\uffbb\060\uffbb\066" +
    "\uffbb\001\002\000\026\017\111\021\077\030\113\035\117" +
    "\041\074\061\110\062\116\063\101\064\112\065\115\001" +
    "\002\000\060\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\022" +
    "\uffb7\023\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\057\uffb7\060\uffb7\066\uffb7\001\002\000" +
    "\060\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\020\uffba\022\uffba\023" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\057\uffba\060\uffba\066\uffba\001\002\000\026\017" +
    "\uffac\021\uffac\030\uffac\035\uffac\041\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\001\002\000\052\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\016\uffc1\022\uffc1\023\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\057\uffc1\060\uffc1\001\002" +
    "\000\026\017\111\021\077\030\113\035\117\041\074\061" +
    "\110\062\116\063\101\064\112\065\115\001\002\000\026" +
    "\017\uffb0\021\uffb0\030\uffb0\035\uffb0\041\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\065\uffb0\001\002\000\026\017\111" +
    "\021\077\030\113\035\117\041\074\061\110\062\116\063" +
    "\101\064\112\065\115\001\002\000\026\017\uffb1\021\uffb1" +
    "\030\uffb1\035\uffb1\041\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\001\002\000\026\017\uffb5\021\uffb5\030\uffb5" +
    "\035\uffb5\041\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\001\002\000\026\017\uffb3\021\uffb3\030\uffb3\035\uffb3" +
    "\041\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\001" +
    "\002\000\026\017\uffb4\021\uffb4\030\uffb4\035\uffb4\041\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\001\002\000" +
    "\026\017\uffb2\021\uffb2\030\uffb2\035\uffb2\041\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\065\uffb2\001\002\000\036\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\022\uffcb\023\uffcb\032\uffcb\033\uffcb\034" +
    "\132\001\002\000\026\017\111\021\077\030\113\035\117" +
    "\041\074\061\110\062\116\063\101\064\112\065\115\001" +
    "\002\000\036\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\016\uffc9\022\uffc9\023\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\001\002\000\016\006\uffcd\016\uffcd" +
    "\022\uffcd\023\uffcd\032\uffcd\033\uffcd\001\002\000\026\017" +
    "\111\021\077\030\113\035\117\041\074\061\110\062\116" +
    "\063\101\064\112\065\115\001\002\000\036\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\016\uffc8\022\uffc8\023\uffc8\032\uffc8\033\uffc8\034\uffc8\001" +
    "\002\000\026\017\111\021\077\030\113\035\117\041\074" +
    "\061\110\062\116\063\101\064\112\065\115\001\002\000" +
    "\026\017\111\021\077\030\113\035\117\041\074\061\110" +
    "\062\116\063\101\064\112\065\115\001\002\000\026\017" +
    "\uffaf\021\uffaf\030\uffaf\035\uffaf\041\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\065\uffaf\001\002\000\026\017\uffad\021" +
    "\uffad\030\uffad\035\uffad\041\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\001\002\000\026\017\uffae\021\uffae\030" +
    "\uffae\035\uffae\041\uffae\061\uffae\062\uffae\063\uffae\064\uffae" +
    "\065\uffae\001\002\000\026\017\111\021\077\030\113\035" +
    "\117\041\074\061\110\062\116\063\101\064\112\065\115" +
    "\001\002\000\046\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\022\uffc5\023\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\141\037\143\040" +
    "\142\001\002\000\052\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016\uffc3\022\uffc3\023" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\057\uffc3\060\uffc3\001\002\000\040\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\016\uffc6\022\uffc6\023\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\001\002\000\004\030\156\001\002\000\026\017\111" +
    "\021\077\030\113\035\117\041\074\061\110\062\116\063" +
    "\101\064\112\065\115\001\002\000\060\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\020\uffbf\022\uffbf\023\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\057\uffbf\060" +
    "\uffbf\066\uffbf\001\002\000\060\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\020\uffa8\022\uffa8\023\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\057\uffa8\060\uffa8\066" +
    "\uffa8\001\002\000\004\016\155\001\002\000\060\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\020\uffaa\022\uffaa\023\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\057" +
    "\uffaa\060\uffaa\066\uffaa\001\002\000\060\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\020\uffa9\022\uffa9\023\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\057\uffa9\060" +
    "\uffa9\066\uffa9\001\002\000\004\022\160\001\002\000\060" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\020\uffb6\022\uffb6\023\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\057\uffb6\060\uffb6\066\uffb6\001\002\000\026\032\006" +
    "\042\073\043\060\047\061\050\063\051\067\052\071\053" +
    "\070\054\066\055\057\001\002\000\006\006\uffe0\033\uffe0" +
    "\001\002\000\004\032\006\001\002\000\006\006\uffd7\033" +
    "\uffd7\001\002\000\006\006\uffdb\033\uffdb\001\002\000\006" +
    "\006\uffd9\033\uffd9\001\002\000\006\006\uffd8\033\uffd8\001" +
    "\002\000\014\002\uffff\004\uffff\006\uffff\033\uffff\044\uffff" +
    "\001\002\000\006\006\uffda\033\uffda\001\002\000\004\021" +
    "\173\001\002\000\030\017\111\021\077\022\uffd1\030\113" +
    "\035\117\041\074\061\110\062\116\063\101\064\112\065" +
    "\115\001\002\000\006\006\uffdd\033\uffdd\001\002\000\006" +
    "\022\uffcf\023\uffcf\001\002\000\004\022\202\001\002\000" +
    "\006\022\uffd2\023\200\001\002\000\026\017\111\021\077" +
    "\030\113\035\117\041\074\061\110\062\116\063\101\064" +
    "\112\065\115\001\002\000\006\022\uffd0\023\uffd0\001\002" +
    "\000\006\006\uffd3\033\uffd3\001\002\000\004\032\006\001" +
    "\002\000\010\006\uffd5\033\uffd5\044\205\001\002\000\004" +
    "\032\006\001\002\000\006\006\uffd6\033\uffd6\001\002\000" +
    "\020\024\023\025\026\026\012\027\010\030\025\031\007" +
    "\066\013\001\002\000\004\030\216\001\002\000\006\023" +
    "\213\033\214\001\002\000\006\023\uffe4\033\uffe4\001\002" +
    "\000\020\024\023\025\026\026\012\027\010\030\025\031" +
    "\007\066\013\001\002\000\010\015\uffe6\030\uffe6\056\uffe6" +
    "\001\002\000\006\023\uffe5\033\uffe5\001\002\000\006\023" +
    "\uffe3\033\uffe3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\010\005\017\006\015" +
    "\007\020\010\016\011\014\012\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\061\013\063\014\071" +
    "\021\064\001\001\000\002\001\001\000\006\011\055\012" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\026" +
    "\010\016\011\014\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\032\001\001\000\020\007\036\010\016\011\014\012" +
    "\013\016\037\017\035\022\034\001\001\000\004\003\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\036\010\016\011\014\012\013\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\051\007\020\010\016\011\014\012\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\106\024\105\025\104\026\103\027\102\030\101\031" +
    "\077\032\075\035\113\043\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\023\106\024\105\025\104\026" +
    "\103\027\102\030\101\031\077\032\075\035\113\043\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\106\024\105\025\104\026\103\027\102\030\101\031\077" +
    "\032\075\035\113\043\166\001\001\000\026\023\106\024" +
    "\105\025\104\026\103\027\102\030\101\031\077\032\075" +
    "\035\113\043\165\001\001\000\026\023\106\024\105\025" +
    "\104\026\103\027\102\030\101\031\077\032\075\035\113" +
    "\043\164\001\001\000\026\023\106\024\105\025\104\026" +
    "\103\027\102\030\101\031\077\032\075\035\113\043\162" +
    "\001\001\000\002\001\001\000\026\023\106\024\105\025" +
    "\104\026\103\027\102\030\101\031\077\032\075\035\113" +
    "\043\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\156\024\105\025\104\026\103" +
    "\027\102\030\101\031\077\032\075\035\113\001\001\000" +
    "\004\036\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\117\031\077\032\075\035\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\133\024\105\025\104\026\103" +
    "\027\102\030\101\031\077\032\075\035\113\001\001\000" +
    "\002\001\001\000\020\025\130\026\103\027\102\030\101" +
    "\031\077\032\075\035\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\132\027\102\030" +
    "\101\031\077\032\075\035\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\135\027\102\030\101\031" +
    "\077\032\075\035\113\001\001\000\002\001\001\000\016" +
    "\026\146\027\102\030\101\031\077\032\075\035\113\001" +
    "\001\000\012\030\145\031\077\032\075\035\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\144\030\101\031\077\032\075\035\113\001\001" +
    "\000\004\034\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\023\153\024\105\025\104" +
    "\026\103\027\102\030\101\031\077\032\075\035\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\061\021\161\001\001\000\002" +
    "\001\001\000\004\003\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\173\001\001\000" +
    "\032\023\106\024\105\025\104\026\103\027\102\030\101" +
    "\031\077\032\075\035\113\041\175\042\176\043\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\023\106\024\105\025\104\026" +
    "\103\027\102\030\101\031\077\032\075\035\113\043\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\203\001\001\000\002\001\001\000\004\003\205\001\001" +
    "\000\002\001\001\000\016\007\207\010\016\011\014\012" +
    "\013\020\211\037\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\207\010\016\011" +
    "\014\012\013\020\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVE_APERTURA declaraciones instrucciones LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones TERMINACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PUNTO_Y_COMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= ID_PROC IDENTIFICADOR parametros_formales bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= ID_TYPE tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_formales ::= PARENTESIS_APERTURA lista_parametros_formales_e PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros_formales_e ::= lista_parametros_formales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales_e",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros_formales_e ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales_e",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_parametros_formales ::= lista_parametros_formales COMA parametro_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros_formales ::= parametro_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro_formal ::= tipo REFERENCIA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_formal ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= T0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T0 ::= T0 CORCHETE_APERTURA LITERAL_ENTERO CORCHETE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T0 ::= T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T0",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T1 ::= INDIRECCION T1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T1 ::= T2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T1",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T2 ::= ID_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T2 ::= ID_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T2 ::= ID_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T2 ::= ID_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T2 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T2 ::= ID_STRUCT LLAVE_APERTURA lista_campos LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_campos ::= lista_campos COMA campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_campos",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_campos ::= campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_campos",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // campo ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones ::= lista_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_instrucciones ::= lista_instrucciones PUNTO_Y_COMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= INI_NOMBRE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= ID_CALL IDENTIFICADOR parametros_reales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= ID_NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= ID_NEW expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= ID_READ expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= ID_WRITE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= ID_DELETE expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= ID_WHILE expresion bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= ID_IF expresion bloque ID_ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= ID_IF expresion bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_reales ::= PARENTESIS_APERTURA lista_expresiones_e PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_expresiones_e ::= lista_expresiones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones_e",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista_expresiones_e ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones_e",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_expresiones",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("expresion",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E1 ASIGNACION E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= E2 SUMA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E3 RESTA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E3 ::= E4 ID_AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E4 ID_OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E4 ::= E4 OP4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= E6 OP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= LITERAL_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= LITERAL_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= ID_NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E7 ::= PARENTESIS_APERTURA E0 PARENTESIS_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP1 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP1 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP1 ::= DESIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP4 ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP4 ::= DIVISION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP4 ::= MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP5 ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP5 ::= ID_NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP6 ::= CORCHETE_APERTURA E0 CORCHETE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP6 ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP6 ::= INDIRECCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

