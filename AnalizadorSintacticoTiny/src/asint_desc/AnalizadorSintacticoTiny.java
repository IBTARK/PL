/* AnalizadorSintacticoTiny.java */
/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint_desc;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {
    protected void newToken(Token t) {}

  final public void analiza() throws ParseException {
    trace_call("analiza");
    try {

      programa();
      jj_consume_token(0);
    } finally {
      trace_return("analiza");
    }
}

  final public void programa() throws ParseException {
    trace_call("programa");
    try {

      bloque();
    } finally {
      trace_return("programa");
    }
}

  final public void bloque() throws ParseException {
    trace_call("bloque");
    try {

      jj_consume_token(34);
      declaraciones();
      instrucciones();
      jj_consume_token(35);
    } finally {
      trace_return("bloque");
    }
}

  final public void declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case int_id:
      case real_id:
      case bool_id:
      case string_id:
      case struct_id:
      case proc_id:
      case type_id:
      case iden:
      case 44:{
        lista_declaraciones();
        jj_consume_token(36);
        break;
        }
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("declaraciones");
    }
}

  final public void lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {

      declaracion();
      r_lista_declaraciones();
    } finally {
      trace_return("lista_declaraciones");
    }
}

  final public void declaracion() throws ParseException {
    trace_call("declaracion");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case proc_id:{
        jj_consume_token(proc_id);
        jj_consume_token(iden);
        parametros_formales();
        bloque();
        break;
        }
      case type_id:{
        jj_consume_token(type_id);
        tipo();
        jj_consume_token(iden);
        break;
        }
      case int_id:
      case real_id:
      case bool_id:
      case string_id:
      case struct_id:
      case iden:
      case 44:{
        tipo();
        jj_consume_token(iden);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion");
    }
}

  final public void r_lista_declaraciones() throws ParseException {
    trace_call("r_lista_declaraciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        jj_consume_token(37);
        declaracion();
        r_lista_declaraciones();
        break;
        }
      default:
        jj_la1[2] = jj_gen;

      }
    } finally {
      trace_return("r_lista_declaraciones");
    }
}

  final public void parametros_formales() throws ParseException {
    trace_call("parametros_formales");
    try {

      jj_consume_token(38);
      lista_parametros_formales_e();
      jj_consume_token(39);
    } finally {
      trace_return("parametros_formales");
    }
}

  final public void lista_parametros_formales_e() throws ParseException {
    trace_call("lista_parametros_formales_e");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case int_id:
      case real_id:
      case bool_id:
      case string_id:
      case struct_id:
      case iden:
      case 44:{
        lista_parametros_formales();
        break;
        }
      default:
        jj_la1[3] = jj_gen;

      }
    } finally {
      trace_return("lista_parametros_formales_e");
    }
}

  final public void lista_parametros_formales() throws ParseException {
    trace_call("lista_parametros_formales");
    try {

      parametro_formal();
      r_lista_parametros_formales();
    } finally {
      trace_return("lista_parametros_formales");
    }
}

  final public void r_lista_parametros_formales() throws ParseException {
    trace_call("r_lista_parametros_formales");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        jj_consume_token(40);
        parametro_formal();
        r_lista_parametros_formales();
        break;
        }
      default:
        jj_la1[4] = jj_gen;

      }
    } finally {
      trace_return("r_lista_parametros_formales");
    }
}

  final public void parametro_formal() throws ParseException {
    trace_call("parametro_formal");
    try {

      tipo();
      r_parametro_formal();
    } finally {
      trace_return("parametro_formal");
    }
}

  final public void r_parametro_formal() throws ParseException {
    trace_call("r_parametro_formal");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:{
        jj_consume_token(41);
        jj_consume_token(iden);
        break;
        }
      case iden:{
        jj_consume_token(iden);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("r_parametro_formal");
    }
}

  final public void tipo() throws ParseException {
    trace_call("tipo");
    try {

      T0();
    } finally {
      trace_return("tipo");
    }
}

  final public void T0() throws ParseException {
    trace_call("T0");
    try {

      T1();
      RT0();
    } finally {
      trace_return("T0");
    }
}

  final public void RT0() throws ParseException {
    trace_call("RT0");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 42:{
        jj_consume_token(42);
        jj_consume_token(literalEntero);
        jj_consume_token(43);
        RT0();
        break;
        }
      default:
        jj_la1[6] = jj_gen;

      }
    } finally {
      trace_return("RT0");
    }
}

  final public void T1() throws ParseException {
    trace_call("T1");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 44:{
        jj_consume_token(44);
        T1();
        break;
        }
      case int_id:
      case real_id:
      case bool_id:
      case string_id:
      case struct_id:
      case iden:{
        T2();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("T1");
    }
}

  final public void T2() throws ParseException {
    trace_call("T2");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case int_id:{
        jj_consume_token(int_id);
        break;
        }
      case real_id:{
        jj_consume_token(real_id);
        break;
        }
      case bool_id:{
        jj_consume_token(bool_id);
        break;
        }
      case string_id:{
        jj_consume_token(string_id);
        break;
        }
      case iden:{
        jj_consume_token(iden);
        break;
        }
      case struct_id:{
        jj_consume_token(struct_id);
        jj_consume_token(34);
        lista_campos();
        jj_consume_token(35);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("T2");
    }
}

  final public void lista_campos() throws ParseException {
    trace_call("lista_campos");
    try {

      campo();
      r_lista_campos();
    } finally {
      trace_return("lista_campos");
    }
}

  final public void r_lista_campos() throws ParseException {
    trace_call("r_lista_campos");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        jj_consume_token(40);
        campo();
        r_lista_campos();
        break;
        }
      default:
        jj_la1[9] = jj_gen;

      }
    } finally {
      trace_return("r_lista_campos");
    }
}

  final public void campo() throws ParseException {
    trace_call("campo");
    try {

      tipo();
      jj_consume_token(iden);
    } finally {
      trace_return("campo");
    }
}

  final public void instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case if_id:
      case call_id:
      case nl_id:
      case new_id:
      case read_id:
      case write_id:
      case delete_id:
      case while_id:
      case 34:
      case 45:{
        lista_instrucciones();
        break;
        }
      default:
        jj_la1[10] = jj_gen;

      }
    } finally {
      trace_return("instrucciones");
    }
}

  final public void lista_instrucciones() throws ParseException {
    trace_call("lista_instrucciones");
    try {

      instruccion();
      r_lista_instrucciones();
    } finally {
      trace_return("lista_instrucciones");
    }
}

  final public void r_lista_instrucciones() throws ParseException {
    trace_call("r_lista_instrucciones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        jj_consume_token(37);
        instruccion();
        r_lista_instrucciones();
        break;
        }
      default:
        jj_la1[11] = jj_gen;

      }
    } finally {
      trace_return("r_lista_instrucciones");
    }
}

  final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        jj_consume_token(45);
        expresion();
        break;
        }
      case call_id:{
        jj_consume_token(call_id);
        jj_consume_token(iden);
        parametros_reales();
        break;
        }
      case nl_id:{
        jj_consume_token(nl_id);
        break;
        }
      case new_id:{
        jj_consume_token(new_id);
        expresion();
        break;
        }
      case read_id:{
        jj_consume_token(read_id);
        expresion();
        break;
        }
      case write_id:{
        jj_consume_token(write_id);
        expresion();
        break;
        }
      case delete_id:{
        jj_consume_token(delete_id);
        expresion();
        break;
        }
      case while_id:{
        jj_consume_token(while_id);
        expresion();
        bloque();
        break;
        }
      case if_id:{
        jj_consume_token(if_id);
        expresion();
        bloque();
        r_instruccion_if();
        break;
        }
      case 34:{
        bloque();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion");
    }
}

  final public void r_instruccion_if() throws ParseException {
    trace_call("r_instruccion_if");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case else_id:{
        jj_consume_token(else_id);
        bloque();
        break;
        }
      default:
        jj_la1[13] = jj_gen;

      }
    } finally {
      trace_return("r_instruccion_if");
    }
}

  final public void parametros_reales() throws ParseException {
    trace_call("parametros_reales");
    try {

      jj_consume_token(38);
      lista_expresiones_e();
      jj_consume_token(39);
    } finally {
      trace_return("parametros_reales");
    }
}

  final public void lista_expresiones_e() throws ParseException {
    trace_call("lista_expresiones_e");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case literalEntero:
      case literalReal:
      case literalCadena:
      case not_id:
      case true_id:
      case false_id:
      case null_id:
      case iden:
      case 38:
      case 47:{
        lista_expresiones();
        break;
        }
      default:
        jj_la1[14] = jj_gen;

      }
    } finally {
      trace_return("lista_expresiones_e");
    }
}

  final public void lista_expresiones() throws ParseException {
    trace_call("lista_expresiones");
    try {

      expresion();
      r_lista_expresiones();
    } finally {
      trace_return("lista_expresiones");
    }
}

  final public void r_lista_expresiones() throws ParseException {
    trace_call("r_lista_expresiones");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        jj_consume_token(40);
        expresion();
        r_lista_expresiones();
        break;
        }
      default:
        jj_la1[15] = jj_gen;

      }
    } finally {
      trace_return("r_lista_expresiones");
    }
}

  final public void expresion() throws ParseException {
    trace_call("expresion");
    try {

      E0();
    } finally {
      trace_return("expresion");
    }
}

  final public void E0() throws ParseException {
    trace_call("E0");
    try {

      E1();
      RE0();
    } finally {
      trace_return("E0");
    }
}

  final public void RE0() throws ParseException {
    trace_call("RE0");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        jj_consume_token(46);
        E1();
        RE0();
        break;
        }
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("RE0");
    }
}

  final public void E1() throws ParseException {
    trace_call("E1");
    try {

      E2();
      RE1();
    } finally {
      trace_return("E1");
    }
}

  final public void RE1() throws ParseException {
    trace_call("RE1");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:{
        OP1();
        E2();
        RE1();
        break;
        }
      default:
        jj_la1[17] = jj_gen;

      }
    } finally {
      trace_return("RE1");
    }
}

  final public void E2() throws ParseException {
    trace_call("E2");
    try {

      E3();
      RE2();
      REC2();
    } finally {
      trace_return("E2");
    }
}

  final public void RE2() throws ParseException {
    trace_call("RE2");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        E3();
        break;
        }
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("RE2");
    }
}

  final public void REC2() throws ParseException {
    trace_call("REC2");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 48:{
        jj_consume_token(48);
        E3();
        REC2();
        break;
        }
      default:
        jj_la1[19] = jj_gen;

      }
    } finally {
      trace_return("REC2");
    }
}

  final public void E3() throws ParseException {
    trace_call("E3");
    try {

      E4();
      RE3();
    } finally {
      trace_return("E3");
    }
}

  final public void RE3() throws ParseException {
    trace_call("RE3");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case and_id:{
        jj_consume_token(and_id);
        E3();
        break;
        }
      case or_id:{
        jj_consume_token(or_id);
        E4();
        break;
        }
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("RE3");
    }
}

  final public void E4() throws ParseException {
    trace_call("E4");
    try {

      E5();
      RE4();
    } finally {
      trace_return("E4");
    }
}

  final public void RE4() throws ParseException {
    trace_call("RE4");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:
      case 56:
      case 57:{
        OP4();
        E5();
        RE4();
        break;
        }
      default:
        jj_la1[21] = jj_gen;

      }
    } finally {
      trace_return("RE4");
    }
}

  final public void E5() throws ParseException {
    trace_call("E5");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case not_id:
      case 47:{
        OP5();
        E5();
        break;
        }
      case literalEntero:
      case literalReal:
      case literalCadena:
      case true_id:
      case false_id:
      case null_id:
      case iden:
      case 38:{
        E6();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("E5");
    }
}

  final public void E6() throws ParseException {
    trace_call("E6");
    try {

      E7();
      RE6();
    } finally {
      trace_return("E6");
    }
}

  final public void RE6() throws ParseException {
    trace_call("RE6");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 42:
      case 44:
      case 58:{
        OP6();
        RE6();
        break;
        }
      default:
        jj_la1[23] = jj_gen;

      }
    } finally {
      trace_return("RE6");
    }
}

  final public void E7() throws ParseException {
    trace_call("E7");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case literalEntero:{
        jj_consume_token(literalEntero);
        break;
        }
      case literalReal:{
        jj_consume_token(literalReal);
        break;
        }
      case iden:{
        jj_consume_token(iden);
        break;
        }
      case true_id:{
        jj_consume_token(true_id);
        break;
        }
      case false_id:{
        jj_consume_token(false_id);
        break;
        }
      case literalCadena:{
        jj_consume_token(literalCadena);
        break;
        }
      case null_id:{
        jj_consume_token(null_id);
        break;
        }
      case 38:{
        jj_consume_token(38);
        E0();
        jj_consume_token(39);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("E7");
    }
}

  final public void OP1() throws ParseException {
    trace_call("OP1");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        break;
        }
      case 50:{
        jj_consume_token(50);
        break;
        }
      case 51:{
        jj_consume_token(51);
        break;
        }
      case 52:{
        jj_consume_token(52);
        break;
        }
      case 53:{
        jj_consume_token(53);
        break;
        }
      case 54:{
        jj_consume_token(54);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OP1");
    }
}

  final public void OP4() throws ParseException {
    trace_call("OP4");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 55:{
        jj_consume_token(55);
        break;
        }
      case 56:{
        jj_consume_token(56);
        break;
        }
      case 57:{
        jj_consume_token(57);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OP4");
    }
}

  final public void OP5() throws ParseException {
    trace_call("OP5");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        break;
        }
      case not_id:{
        jj_consume_token(not_id);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OP5");
    }
}

  final public void OP6() throws ParseException {
    trace_call("OP6");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 42:{
        jj_consume_token(42);
        E0();
        jj_consume_token(43);
        break;
        }
      case 58:{
        jj_consume_token(58);
        jj_consume_token(iden);
        break;
        }
      case 44:{
        jj_consume_token(44);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OP6");
    }
}

  /** Generated Token Manager. */
  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6f800,0x6f800,0x0,0xf800,0x0,0x0,0x0,0xf800,0xf800,0x0,0x7f80000,0x0,0x7f80000,0x8000000,0xc0010700,0x0,0x0,0x0,0x0,0x0,0x30000000,0x0,0xc0010700,0x0,0xc0000700,0x0,0x0,0x10000,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x1002,0x1002,0x20,0x1002,0x100,0x202,0x400,0x1002,0x2,0x100,0x2004,0x20,0x2004,0x0,0x8043,0x100,0x4000,0x7e0000,0x8000,0x10000,0x0,0x3800000,0x8043,0x4001400,0x43,0x7e0000,0x3800000,0x8000,0x4001400,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintacticoTiny(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintacticoTiny(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 29; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
