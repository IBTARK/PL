options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint_desc;

public class AnalizadorSintacticoTiny {
    protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)


	TOKEN:{<#letra:["a"-"z","A"-"Z"]|"_">}
	TOKEN:{<#digitoPositivo:["1"-"9"]>}
	TOKEN:{<#digito:<digitoPositivo>|"0">} 
	TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
	TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
	SKIP:{<["\t"," ","\r","\b","\n"]>}  
	SKIP:{<"##"(~["\n"])*>}  
 
	TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
	TOKEN:{<literalReal:<literalEntero> ("." <parteDecimal> | (("." <parteDecimal>) ? (("e" | "E") <literalEntero>)))>}
	TOKEN:{<literalCadena:(~["\""])*>}
	TOKEN:{<int:"int">}
	TOKEN:{<real:"real">}
	TOKEN:{<bool:"bool">}
	TOKEN:{<string:"string">}
	TOKEN:{<struct:"struct">}
	TOKEN:{<iden: <letra>(<letra>|<digito>)* >}
	TOKEN:{<not:"not">}
	TOKEN:{<proc:"proc">}
	TOKEN:{<type:"type">}
	TOKEN:{<if:"if">}
	TOKEN:{<call:"call">}
	TOKEN:{<nl:"nl">}
	TOKEN:{<new:"new">}
	TOKEN:{<read:"read">}
	TOKEN:{<write:"write">}
	TOKEN:{<delete:"delete">}
	TOKEN:{<while:"while">}
	TOKEN:{<else:"else">}
	TOKEN:{<and:"and">}
	TOKEN:{<or:"or">}
  	TOKEN:{<true:"true">}
  	TOKEN:{<false:"false">}
  	TOKEN:{<null:"null">}
  
	void analiza() : {} {programa() <EOF> }
	void programa() : {} {bloque()}
	void bloque() : {} {declaraciones() instrucciones()}
	void declaraciones() : {} {lista_declaraciones() "&&" | {}}
	void lista_declaraciones() : {} {declaraci贸n() r_lista_declaraciones()}
	void declaracion() : {} { <proc> <iden> parametros_formales() bloque() | <type> tipo() <iden> | tipo() <iden> }
	void r_lista_declaraciones() : {} {";" declaraci贸n() r_lista_declaraciones() | {}}
	void parametros_formales() : {} {"(" lista_parametros_formales_e() ")"}
	void lista_parametros_formales_e() : {} {lista_parametros_formales() | {}}
	void lista_parametros_formales() : {} {parametro_formal() r_lista_parametros_formales()}
	void r_lista_parametros_formales() : {} {"," parametro_formal() r_lista_parametros_formales() | {}}
	void parametro_formal() : {} {tipo()  r_parametro_formal()}
	void r_parametro_formal() : {} {"&" <iden> | <iden>}
	void tipo() : {} {T0()}
	void T0() : {} {T1() RT0()}
	void RT0() : {} {"[" <literalEntero> "]" RT0() | {}}
	void T1() : {} {"^" T1 | T2 }
	void T2() : {} {<int> | <real> | <bool> | <string> | <iden> | <struct> "{" lista_campos() "}" }
	void lista_campos() : {} {campo() r_lista_campos()}
	void r_lista_campos() : {} {campo() r_listacampos() | {}}
	void campo() : {} {tipo() <iden>}
	void instrucciones() : {} {lista_instrucciones() | {}}
	void lista_instrucciones() : {} {instrucci贸n() r_lista_instrucciones()}
	void r_lista_instrucciones() : {} {";" instrucci贸n() r_lista_instrucciones() | {}}
	void instruccion() : {} {"@" expresion() | <call> <iden> parametros_reales() | <nl> | <new> expresion() | <read> expresion() | <write> expresion() | <delete> expresion() | <while> expresion() bloque() | <if> expresion() bloque() r_instruccion_if() | bloque()}
    void r_instruccion_if() : {} {<else> bloque() | {}}
	void parametros_reales() : {} {"(" lista_expresiones_e() ")"}
	void lista_expresiones_e() : {} {lista_expresiones() | {}}
	void lista_expresiones() : {} {expresion() r_lista_expresiones()}
	void r_lista_expresiones() : {} {"," expresion() r_lista_expresiones() | {}}
	void expresion() : {} {E0()}
	void E0() : {} {E1() RE0()}
	void RE0() : {} {"=" E1() RE0() | {}}
	void E1() : {} {E2() RE1()}
	void RE1() : {} {OP1() E2() RE1() | {}}
	void E2() : {} {E3() RE2() REC2()}
	void RE2() : {} {"-" E3() | {}}
	void REC2() : {} {"+" E3() REC2() | {}}
	void E3() : {} {E4() RE3()}
	void RE3() : {} {<and> E3() | <or> E4() | {}}
	void E4() : {} {E5() RE4()}
	void RE4() : {} {OP4() E5() RE4() | {}}
	void E5() : {} { OP5() E5 | E6 }
	void E6() : {} {E7() RE6()}
	void RE6() : {} {OP6() RE6() | {}}
	void E7() : {} {<literalEntero> | <literalReal> | <iden> |<true> | <false> | <literalCadena> | <null> | "(" E0() ")"}
	void OP0() : {} {"<" | ">" | "<=" | ">=" | "==" | "!="}
	void OP4() : {} { "*" | "/" | "%" }
	void OP5() : {} {"-" | <not>}
	void OP6() : {} {"[" E0() "]" | "." <iden> | "^"}
	