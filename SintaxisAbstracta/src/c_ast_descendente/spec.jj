options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(ConstructorASTs)
package constructoresAsts.descendente;
import constructoresAsts.asint.ClaseSemantica;
import constructoresAsts.asint.SintaxisAbstracta*;
import constructoresAsts.descendente.UnidadLexica.StringLocalizado;

public class ConstructorASTs {
   private ClaseSemantica sem = new ClaseSemantica();   
}
PARSER_END(ConstructorASTs)
  
	TOKEN:{<#letra:["a"-"z","A"-"Z"]|"_">}
	TOKEN:{<#digitoPositivo:["1"-"9"]>}
	TOKEN:{<#digito:<digitoPositivo>|"0">} 
	TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
	TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
	SKIP:{<["\t"," ","\r","\b","\n"]>}  
	SKIP:{<"##"(~["\n"])*>}  
 
	TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
	TOKEN:{<literalReal:<literalEntero> ("." <parteDecimal> | (("." <parteDecimal>) ? (("e" | "E") <literalEntero>)))>}
	TOKEN:{<literalCadena:"\""(~["\""])*"\"">}
	TOKEN:{<int_id:("i"|"I")("n"|"N")("t"|"T")>}
	TOKEN:{<real_id:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
	TOKEN:{<bool_id:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
	TOKEN:{<string_id:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
	TOKEN:{<struct_id:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
	TOKEN:{<not_id:("n"|"N")("o"|"O")("t"|"T")>}
	TOKEN:{<proc_id:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
	TOKEN:{<type_id:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
	TOKEN:{<if_id:("i"|"I")("f"|"F")>}
	TOKEN:{<call_id:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
	TOKEN:{<nl_id:("n"|"N")("l"|"L")>}
	TOKEN:{<new_id:("n"|"N")("e"|"E")("w"|"W")>}
	TOKEN:{<read_id:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
	TOKEN:{<write_id:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
	TOKEN:{<delete_id:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
	TOKEN:{<while_id:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
	TOKEN:{<else_id:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
	TOKEN:{<and_id:("a"|"A")("n"|"N")("d"|"D")>}
	TOKEN:{<or_id:("o"|"O")("r"|"R")>}
  	TOKEN:{<true_id:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  	TOKEN:{<false_id:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  	TOKEN:{<null_id:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
	TOKEN:{<iden: <letra>(<letra>|<digito>)* >}
  
	Prog analiza(): 
		{Prog prog;} 
		{
			prog = programa() <EOF> 
			{return prog;} 
		}
	
	Prog programa(): 
		{Bloque bloq} 
		{
			bloq = bloque()
			{return bloq;}
		}
	
	Bloq bloque(): 
		{Instr inst; Decs decs;} 
		{
			"{" decs = declaraciones() instr = instrucciones() "}"
			{return sem.prog(decs, instr);}
		}
	
	Decs declaraciones(): 
		{LDecs deca;} 
		{
			deca = lista_declaraciones() "&&"
			{return sem.siDecs(deca);} 
			|
			{return sem.noDecs();}
		}
		
	LDecs lista_declaraciones(): 
		{LDecs deca; Dec dec;} 
		{
			dec = declaracion() deca = r_lista_declaraciones(sem.unaDec(dec)) 
			{return deca;}
		}
       
	LDecs r_lista_declaraciones(LDecs decah): 
		{LDecs deca; Dec dec;} 
		{
			";" dec = declaracion() deca = r_lista_declaraciones(sem.muchasDecs(decah,dec))  
			{return deca;}
			|
			{return decah;}
		}	
	
	Dec declaracion(): 
		{String id; ParamForm param; Bloque bloque: Tipo tipo} 
		{
			 <proc_id> id = <iden> param = parametros_formales() bloque = bloque() 
			 {return sem.decProg(id, param, bloque);}
			 | 
			 <type_id> tipo = tipo() id = <iden> 
			 {return sem.decType(tipo, id);}
			 | 
			 tipo = tipo() id = <iden> 
			 {return sem.decVar(tipo, id);} 
			 }
		
	ParamForm parametros_formales():
		{ParamForm a;}
		{
			"(" a = lista_parametros_formales_e() ")"
			{return a;}
		}
		
	ParamForm lista_parametros_formales_e():
		{LParam params;}
		{
			params = lista_parametros_formales()
			{return sem.siParam(params);}
			|
			{return sem.noParam();}
		}
		
	LParam lista_parametros_formales():
		{LParam params; Param param;}
		{
			param = parametro_formal() params = r_lista_parametros_formales(sem.unParam(param))
			{return params;}
		}
		
	LParam r_lista_parametros_formales(LParam ah):
		{LParam params; Param param;}
		{
			param = parametro_formal() params = r_lista_parametros_formales(sem.muchosParam(ah, param))
			{return params;}
			|
			{return ah;}
		}
		
	ParamForm parametro_formal():
		{Tipo tipo; ParamForm param} 
		{
			tipo = tipo()  param = r_parametro_formal(tipo)
			
			{return param;}
		}
	
	ParamForm r_parametro_formal(Tipo tipo): 
		{String id} 
		{
			"&" id = <iden> 
			{return sem.paramFormRef(tipo ,id);}
			| 
			id = <iden>
			{return sem.paramForm(tipo ,id);}
		}
	
	Tipo tipo():
		{Tipo tipoa;}
		{
			tipoa = T0()
			{return tipoa;}
		}
	
	Tipo T0():
		{Tipo tipo1a; Tipo tipoa;}
		{
			tipo1a = T1() tipoa = RT0(tipo1a)
			{return tipoa;}
		}
	
	Tipo RT0(Tipo tipoah):
		{Tipo tipoa; Token t; String id}
		{
			"[" id = <literalEntero> "]" tipoa = RT0(sem.tArray(tipoah, id))
			{return tipoa;}
			|
			{return tipoah;}
		}
		
	Tipo T1(): 
		{Tipo tipoa;}
		{
			"^" tipoa = T1() 
			{return sem.tPunt(tipoa);}
			| 
			tipoa = T2() 
			{return tipoa;}
		}
		
	Tipo T2():
		{String id;}
		{
			<int>
			{return sem.tInt();}
			|
			<real>
			{return sem.tReal();}
			|
			<bool>
			{return sem.tBool();}
			|
			<string>
			{return sem.tString();}
			|
			id = <iden>
			{return sem.tIden(id);}
			|
			<struct> "{" campos = lista_campos() "}"
			{return sem.tStruct(campos);}
		}
		
	LCamps lista_campos(): 
		{Campo camp; MuchosCamps mCamps} 
		{
			camp = campo()  mCamps = r_lista_campos(sem.unCamp(camp))
			{return mCamps;}
		}
	
	
	LCamps r_lista_campos(MuchosCamps lcamp): 
		{MuchosCamps mCamps; Campo camp;} 
		{
			"," camp = campo() mCamps = r_lista_campos(sem.muchosCamps(camp, lcamp)) 
			{return mCamps;}
			| 
			{return lcamp;}
		}
	
	Campo campo(): 
		{Tipo tipo; String id;} 
		{
			tipo = tipo() id = <iden>
			{return sem.Campo(tipo, id);}
		}	
		
	Instrs instrucciones(): 
		{LInstrs lInstra;} 
		{
			lInstra = lista_instrucciones()
			{return sem.siInstrs(lInstra);} 
			| 
			{return sem.noInstrs();}
		}
	
	LInstrs lista_instrucciones():
		{LInstrs lInstrsa; Instr instra;}
		{
			instra = instruccion() lInstrsa = r_lista_instrucciones(sem.unaInstr(instra))
			{return lInstrsa;}
		}
	
	LInstrs r_lista_instrucciones(Linstrs instrah): 
		{Linstrs lInstrsa; Instr instra;} 
		{
			";" instra = instruccion() lInstrsa = r_lista_instrucciones(sem.muchasInstrs(instrah,instra))  
			{return lInstrsa;}
			|
			{return instrah;}
		}
		
	Instr instruccion(): 
		{Exp exp; ParamReales param; Bloque bloq; Instr instr;} 
		{
			"@" exp = expresion() 
			{return sem.arrobaInstr(exp);}
			|
			<call_id> id = <iden> param = parametros_reales() 
			{return sem.procInstr(id, param);}
			| 
			<nl_id>
			{return  sem.nlInstr();}
			| 
			<new_id> exp = expresion()
			{return sem.newInstr(exp);} 
			| 
			<read_id> exp = expresion()
			{return sem.readInstr(exp);} 
			| 
			<write_id> exp = expresion()
			{return sem.writeInstr(exp);} 
			| 
			<delete_id> exp = expresion()
			{return sem.deleteInstr(exp);} 
			| 
			<while_id> exp = expresion() bloq = bloque() 
			{return sem.whileInstr(exp, bloque);}
			| 
			<if_id> exp = expresion() bloq = bloque() instr =  r_instruccion_if(exp, bloq)
			{return instr;}
			| 
			bloq = bloque()
			{return sem.bloqueInstr(bloq);}
		}
		
	Instr r_instruccion_if(Exp exp, Bloque bloq);
		{Bloque bloque;}
		{
			<else_id> bloque = bloque()
			{return ifElseInstr(exp, bloq, bloque);}
			|
			{return ifInstr(exp, bloq);}
		}
		
	ParamReales parametros_reales():
		{ParamReales lista;}
		{
			"(" lista = lista_expresiones_e() ")"
			{return lista;}
		}
		
	ParamReales lista_expresiones_e():
		{LExp lista;}
		{
			lista = lista_expresiones()
			{return sem.siExp(lista);}
			|
			{return sem.noExp();}
		}
		
	LExp lista_expresiones():
		{LExp exps; Exp exp;}
		{
			exp = expresion() exps = r_lista_expresiones(sem.unaExp(exp))
			{return exps;}
		}
		
	LExp r_lista_expresiones(LExp ah):
		{LExp exps; Exp exp;}
		{
			"," exp = expresion() exps = r_lista_expresiones(sem.muchasExp(ah, exp))
			{return exps;}
			|
			{return ah;}
		}
	
	Exp E0(): 
		{Exp e1,e2;} 
		{
			e1 = E1() e2 = RE0(e1) 
			{return e2;}
		}
        
	Exp RE0(Exp eh): 
		{Exp e1,e2;} 
		{
			"=" e1 = E1() e2 = E0() 
			{return sem.asignacion(eh, e2);}
			|
			{return eh;}
		}
		
	Exp E1(): 
	{Exp e1,e2;} 
	{
		e2 = E2() e1 = RE1(e2) 
			{return e1;} 
	}
	
	Exp RE1(Exp eh): 
		{String op; Exp e2,e1;} 
		{
			op = OP1() e2 = E2() e1 = RE1(sem.mkop1(op,eh,e2)) 
			{return e1;}
			|
			{return eh;}
		}
		
	Exp E2():
		{Exp e3; Exp re2; Exp rec2;}
		{
			e3 = E3() re2 = RE2(e3) rec2 = REC2(re2)
			{return rec2;}
		}
		
	Exp RE2(Exp ah):
		{Exp e3}
		{
			"-" e3 = E3()
			{return sem.resta(ah, e3);}
			|
			{return ah;}
		}
		
	Exp REC2(Exp ah):
		{Exp e3; Exp rec2;}
		{
			"+" e3 = E3() rec2 = REC2(sem.suma(ah, e3))
			{return rec2;}
			|
			{return ah;}
		}
	

	Exp E4(): 
		{Exp e5,e4;} 
		{
			e5 = E5() e4 = RE4(e5) 
			{return e4;}
		}

	Exp RE4(Exp eh): 
		{String op; Exp e5,e4;} 
		{
			op = OP4() e5 = E5() e4 = RE4(sem.mkop4(op,eh,e5)) 
			{return e4;}
			|
			{return eh;}
		}
		
	Exp E5(): 
		{String op; Exp e5,e6;} 
		{ 
			op = OP5() e5 = E5() 
			{return sem.mkop5(op,e5);}
			| 
			e6 = E6() 
			{return e6;}
		}

	Exp E6(): 
		{Exp e7,re6;} 
		{
			e7 = E7() re6 = RE6(e7) 
			{return re6;}
		}

	Exp RE6(Exp ah): 
		{Exp e0,re6;}
		{
			e0 = E0() re6 = re6(array(ah,e0))
			{return re6;}
			|
			id = <iden> re6 = re6(expCampo(ah,id))
			{return re6;}
			|
			re6 = re6(punt(ah))
			{return re6;}
			|
			{return ah;}
		}

	String op1():       
		{} 
		{
			"<" 
			{return "<";} 
			|
			">" 
			{return ">";}
			|
			"<=" 
			{return "<=";} 
			|
			">=" 
			{return ">=";} 
			|
			"==" 
			{return "==";} 
			|
			"!=" 
			{return "!=";} 
       	}
       	
    String OP4(): 
    	{} 
    	{ 
    		"*" 
    		{return "*";}
    		| 
    		"/" 
    		{return "/";}
    		| 
    		"%" 
    		{return "%";}
    		}
       
	String op5():       
		{} 
		{
			"-" 
			{return "-";} 
			|
			<not> 
			{return <not>;}
       	}
