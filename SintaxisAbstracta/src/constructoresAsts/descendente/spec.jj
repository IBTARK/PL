options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(ConstructorASTs)
package constructoresAsts.descendente;
import constructoresAsts.asint.ClaseSemantica;
import constructoresAsts.asint.SintaxisAbstracta*;
import constructoresAsts.descendente.UnidadLexica.StringLocalizado;

public class ConstructorASTs {
   private ClaseSemantica sem = new ClaseSemantica();   
}
PARSER_END(ConstructorASTs)
  
	TOKEN:{<#letra:["a"-"z","A"-"Z"]|"_">}
	TOKEN:{<#digitoPositivo:["1"-"9"]>}
	TOKEN:{<#digito:<digitoPositivo>|"0">} 
	TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
	TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
	SKIP:{<["\t"," ","\r","\b","\n"]>}  
	SKIP:{<"##"(~["\n"])*>}  
 
	TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
	TOKEN:{<literalReal:<literalEntero> ("." <parteDecimal> | (("." <parteDecimal>) ? (("e" | "E") <literalEntero>)))>}
	TOKEN:{<literalCadena:"\""(~["\""])*"\"">}
	TOKEN:{<int_id:("i"|"I")("n"|"N")("t"|"T")>}
	TOKEN:{<real_id:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
	TOKEN:{<bool_id:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
	TOKEN:{<string_id:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
	TOKEN:{<struct_id:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
	TOKEN:{<not_id:("n"|"N")("o"|"O")("t"|"T")>}
	TOKEN:{<proc_id:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
	TOKEN:{<type_id:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
	TOKEN:{<if_id:("i"|"I")("f"|"F")>}
	TOKEN:{<call_id:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
	TOKEN:{<nl_id:("n"|"N")("l"|"L")>}
	TOKEN:{<new_id:("n"|"N")("e"|"E")("w"|"W")>}
	TOKEN:{<read_id:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
	TOKEN:{<write_id:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
	TOKEN:{<delete_id:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
	TOKEN:{<while_id:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
	TOKEN:{<else_id:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
	TOKEN:{<and_id:("a"|"A")("n"|"N")("d"|"D")>}
	TOKEN:{<or_id:("o"|"O")("r"|"R")>}
  	TOKEN:{<true_id:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  	TOKEN:{<false_id:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  	TOKEN:{<null_id:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
	TOKEN:{<iden: <letra>(<letra>|<digito>)* >}
  
	Prog analiza(): 
		{Prog prog;} 
		{
			prog = programa() <EOF> 
			{return prog;} 
		}
	
	Decs declaraciones(): 
		{LDecs deca;} 
		{
			deca = lista_declaraciones() "&&"
			{return sem.siDecs(deca);} 
			|
			{return sem.noDecs();}
		}
		
	LDecs lista_declaraciones(): 
		{LDecs deca; Dec dec;} 
		{
			dec = declaracion() deca = r_lista_declaraciones(sem.unaDec(dec)) 
			{return deca;}
		}
       
	LDecs r_lista_declaraciones(LDecs decah): 
		{LDecs deca; Dec dec;} 
		{
			";" dec = declaracion() deca = r_lista_declaraciones(sem.muchasDecs(decah,dec))  
			{return deca;}
			|
			{return decah;}
		}	
	
	Tipo tipo():
		{Tipo tipoa;}
		{
			tipoa = T0()
			{return tipoa;}
		}
	
	Tipo T0():
		{Tipo tipo1a; Tipo tipoa;}
		{
			tipo1a = T1() tipoa = RT0(tipo1a)
			{return tipoa;}
		}
	
	Tipo RT0(Tipo tipoah):
		{Tipo tipoa; Token t;}
		{
			"[" id = <literalEntero> "]" tipoa = RT0(sem.tArray(tipoah, id.image))
			{return tipoa;}
			|
			{return tipoah;}
		}
		
	Instrs instrucciones(): 
		{LInstrs lInstra;} 
		{
			lInstra = lista_instrucciones()
			{return sem.siInstrs(lInstra);} 
			| 
			{return sem.noInstrs();}
		}
	
	Linstrs lista_instrucciones():
		{LInstrs lInstrsa; Instr instra;}
		{
			instra = instruccion() lInstrsa = r_lista_instrucciones(sem.unaInstr(instra))
			{return lInstrsa;}
		}
	
	Linstrs r_lista_instrucciones(Linstrs instrah): 
		{Linstrs lInstrsa; Instr instra;} 
		{
			";" instra = instruccion() lInstrsa = r_lista_instrucciones(sem.muchasInstrs(instrah,instra))  
			{return lInstrsa;}
			|
			{return instrah;}
		}
	
	Exp E0(): 
		{Exp e1,e2;} 
		{
			e1 = E1() e2 = RE0(e1) 
			{return e2;}
		}
        
	Exp RE0(Exp eh): 
		{Exp e1,e2;} 
		{
			"=" e1 = E1() e2 = E0() 
			{return sem.asignacion(eh, e2);}
			|
			{return eh;}
		}

	Exp E4(): 
		{Exp e5,e4;} 
		{
			e5 = E5() e4 = RE4(e5) 
			{return e4;}
		}

	Exp RE4(Exp eh): 
		{String op; Exp e5,e4;} 
		{
			op = OP4() e5 = E5() e4 = RE4(sem.mkop(op,eh,e5)) 
			{return e4;}
			|
			{return eh;}
		}

	String op1():       
		{} 
		{
			"<" 
			{return "<";} 
			|
			">" 
			{return ">";}
			|
			"<=" 
			{return "<=";} 
			|
			">=" 
			{return ">=";} 
			|
			"==" 
			{return "==";} 
			|
			"!=" 
			{return "!=";} 
       }
