
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 08 21:41:35 CEST 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import asint.ClaseSemantica;
import asint.SintaxisAbstracta.*;
import alex.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 08 21:41:35 CEST 2024
  */
public class ConstructorASTs extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTs() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\006\000" +
    "\002\006\004\000\002\015\005\000\002\016\003\000\002" +
    "\016\002\000\002\017\005\000\002\017\003\000\002\022" +
    "\005\000\002\022\004\000\002\007\003\000\002\010\006" +
    "\000\002\010\003\000\002\011\004\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\006\000\002\036" +
    "\005\000\002\036\003\000\002\020\004\000\002\013\003" +
    "\000\002\013\002\000\002\014\005\000\002\014\003\000" +
    "\002\021\004\000\002\021\005\000\002\021\003\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\005\000\002\021\007\000\002\021\005" +
    "\000\002\021\003\000\002\037\005\000\002\040\003\000" +
    "\002\040\002\000\002\041\005\000\002\041\003\000\002" +
    "\042\003\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\030\004\000\002\030\003\000\002\031\006\000\002\031" +
    "\005\000\002\031\004\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\027\006\001\002\000\004\002\216\001" +
    "\002\000\004\002\001\001\002\000\052\022\023\023\026" +
    "\024\012\025\010\026\007\027\ufffd\030\ufffd\037\ufffd\040" +
    "\ufffd\042\022\043\024\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\062\025\065\013\001\002\000" +
    "\004\027\206\001\002\000\010\053\uffe8\062\uffe8\066\uffe8" +
    "\001\002\000\030\027\006\030\uffe1\037\073\040\060\044" +
    "\061\045\063\046\067\047\071\050\070\051\066\052\057" +
    "\001\002\000\010\053\uffe9\062\uffe9\066\uffe9\001\002\000" +
    "\020\022\023\023\026\024\012\025\010\026\007\062\025" +
    "\065\013\001\002\000\010\053\uffec\062\uffec\066\uffec\001" +
    "\002\000\010\053\uffee\062\uffee\066\uffee\001\002\000\006" +
    "\004\ufffb\006\ufffb\001\002\000\010\053\ufff0\062\ufff0\066" +
    "\053\001\002\000\006\004\050\006\051\001\002\000\004" +
    "\062\047\001\002\000\004\062\031\001\002\000\010\053" +
    "\uffeb\062\uffeb\066\uffeb\001\002\000\020\022\023\023\026" +
    "\024\012\025\010\026\007\062\025\065\013\001\002\000" +
    "\010\053\uffe7\062\uffe7\066\uffe7\001\002\000\010\053\uffea" +
    "\062\uffea\066\uffea\001\002\000\004\062\030\001\002\000" +
    "\006\004\ufffa\006\ufffa\001\002\000\004\017\032\001\002" +
    "\000\022\020\ufff5\022\023\023\026\024\012\025\010\026" +
    "\007\062\025\065\013\001\002\000\004\027\006\001\002" +
    "\000\006\004\ufff9\006\ufff9\001\002\000\006\020\ufff3\021" +
    "\ufff3\001\002\000\006\020\ufff6\021\045\001\002\000\006" +
    "\053\042\062\043\001\002\000\004\020\041\001\002\000" +
    "\004\027\ufff7\001\002\000\004\062\044\001\002\000\006" +
    "\020\ufff1\021\ufff1\001\002\000\006\020\ufff2\021\ufff2\001" +
    "\002\000\020\022\023\023\026\024\012\025\010\026\007" +
    "\062\025\065\013\001\002\000\006\020\ufff4\021\ufff4\001" +
    "\002\000\006\004\ufff8\006\ufff8\001\002\000\030\027\ufffe" +
    "\030\ufffe\037\ufffe\040\ufffe\044\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002\000\024\022\023" +
    "\023\026\024\012\025\010\026\007\042\022\043\024\062" +
    "\025\065\013\001\002\000\006\004\ufffc\006\ufffc\001\002" +
    "\000\004\061\054\001\002\000\004\015\055\001\002\000" +
    "\010\053\uffef\062\uffef\066\uffef\001\002\000\010\053\uffed" +
    "\062\uffed\066\uffed\001\002\000\006\006\uffdc\030\uffdc\001" +
    "\002\000\026\017\100\032\117\036\074\056\077\057\112" +
    "\060\115\061\111\062\113\063\110\064\116\001\002\000" +
    "\004\062\171\001\002\000\006\006\uffd4\030\uffd4\001\002" +
    "\000\026\017\100\032\117\036\074\056\077\057\112\060" +
    "\115\061\111\062\113\063\110\064\116\001\002\000\004" +
    "\030\167\001\002\000\006\006\uffdf\030\uffdf\001\002\000" +
    "\026\017\100\032\117\036\074\056\077\057\112\060\115" +
    "\061\111\062\113\063\110\064\116\001\002\000\026\017" +
    "\100\032\117\036\074\056\077\057\112\060\115\061\111" +
    "\062\113\063\110\064\116\001\002\000\026\017\100\032" +
    "\117\036\074\056\077\057\112\060\115\061\111\062\113" +
    "\063\110\064\116\001\002\000\026\017\100\032\117\036" +
    "\074\056\077\057\112\060\115\061\111\062\113\063\110" +
    "\064\116\001\002\000\006\006\160\030\uffe2\001\002\000" +
    "\026\017\100\032\117\036\074\056\077\057\112\060\115" +
    "\061\111\062\113\063\110\064\116\001\002\000\026\017" +
    "\uffa9\032\uffa9\036\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\064\uffa9\001\002\000\006\006\uffde\030" +
    "\uffde\001\002\000\060\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\020" +
    "\uffbc\021\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\054\uffbc\055\uffbc\065\uffbc\066\uffbc\001" +
    "\002\000\060\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\054\uffb7\055\uffb7\065\uffb7\066\uffb7\001\002\000" +
    "\026\017\100\032\117\036\074\056\077\057\112\060\115" +
    "\061\111\062\113\063\110\064\116\001\002\000\060\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\150\020\uffc0\021\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\054\uffc0" +
    "\055\uffc0\065\152\066\151\001\002\000\052\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\020\uffc2\021\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\054\uffc2\055\uffc2\001\002" +
    "\000\052\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\021\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\140\034\144\035\142\054" +
    "\137\055\143\001\002\000\040\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\020" +
    "\uffc7\021\uffc7\027\uffc7\030\uffc7\031\uffc7\032\135\001\002" +
    "\000\036\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca\027\uffca" +
    "\030\uffca\031\132\001\002\000\034\005\121\006\uffcc\007" +
    "\125\010\126\011\127\012\130\013\122\014\124\015\uffcc" +
    "\020\uffcc\021\uffcc\027\uffcc\030\uffcc\001\002\000\014\006" +
    "\uffce\020\uffce\021\uffce\027\uffce\030\uffce\001\002\000\060" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\054" +
    "\uffbb\055\uffbb\065\uffbb\066\uffbb\001\002\000\060\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\020\uffba\021\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\054\uffba\055" +
    "\uffba\065\uffba\066\uffba\001\002\000\060\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\020\uffb6\021\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\054\uffb6\055\uffb6\065" +
    "\uffb6\066\uffb6\001\002\000\060\005\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\020\uffb9\021\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\054\uffb9\055\uffb9\065\uffb9\066" +
    "\uffb9\001\002\000\026\017\100\032\117\036\074\056\077" +
    "\057\112\060\115\061\111\062\113\063\110\064\116\001" +
    "\002\000\060\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\021" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\054\uffb5\055\uffb5\065\uffb5\066\uffb5\001\002\000" +
    "\060\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8\021\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\054\uffb8\055\uffb8\065\uffb8\066\uffb8\001\002\000\026\017" +
    "\uffaa\032\uffaa\036\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\001\002\000\052\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\020\uffc1\021\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\035\uffc1\054\uffc1\055\uffc1\001\002" +
    "\000\026\017\100\032\117\036\074\056\077\057\112\060" +
    "\115\061\111\062\113\063\110\064\116\001\002\000\026" +
    "\017\uffaf\032\uffaf\036\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\001\002\000\026\017\100" +
    "\032\117\036\074\056\077\057\112\060\115\061\111\062" +
    "\113\063\110\064\116\001\002\000\026\017\uffae\032\uffae" +
    "\036\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae\063" +
    "\uffae\064\uffae\001\002\000\026\017\uffb3\032\uffb3\036\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\001\002\000\026\017\uffb2\032\uffb2\036\uffb2\056\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001" +
    "\002\000\026\017\uffb1\032\uffb1\036\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000" +
    "\026\017\uffb0\032\uffb0\036\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\001\002\000\036\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\020\uffcb\021\uffcb\027\uffcb\030\uffcb\031" +
    "\132\001\002\000\026\017\100\032\117\036\074\056\077" +
    "\057\112\060\115\061\111\062\113\063\110\064\116\001" +
    "\002\000\036\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\020\uffc9\021\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\001\002\000\016\006\uffcd\015\uffcd" +
    "\020\uffcd\021\uffcd\027\uffcd\030\uffcd\001\002\000\026\017" +
    "\100\032\117\036\074\056\077\057\112\060\115\061\111" +
    "\062\113\063\110\064\116\001\002\000\036\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\020\uffc8\021\uffc8\027\uffc8\030\uffc8\031\uffc8\001" +
    "\002\000\026\017\100\032\117\036\074\056\077\057\112" +
    "\060\115\061\111\062\113\063\110\064\116\001\002\000" +
    "\026\017\uffad\032\uffad\036\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\064\uffad\001\002\000\026\017" +
    "\100\032\117\036\074\056\077\057\112\060\115\061\111" +
    "\062\113\063\110\064\116\001\002\000\026\017\uffab\032" +
    "\uffab\036\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab" +
    "\063\uffab\064\uffab\001\002\000\026\017\100\032\117\036" +
    "\074\056\077\057\112\060\115\061\111\062\113\063\110" +
    "\064\116\001\002\000\026\017\uffac\032\uffac\036\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\001\002\000\046\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\140\034\144\035" +
    "\142\001\002\000\052\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3\021" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\054\uffc3\055\uffc3\001\002\000\040\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\020\uffc6\021\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\001\002\000\004\062\155\001\002\000\026\017\100" +
    "\032\117\036\074\056\077\057\112\060\115\061\111\062" +
    "\113\063\110\064\116\001\002\000\060\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\020\uffbd\021\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\054\uffbd\055\uffbd\065" +
    "\uffbd\066\uffbd\001\002\000\004\015\154\001\002\000\060" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\054" +
    "\uffbf\055\uffbf\065\uffbf\066\uffbf\001\002\000\060\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\054\uffbe\055" +
    "\uffbe\065\uffbe\066\uffbe\001\002\000\004\020\157\001\002" +
    "\000\060\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\054\uffb4\055\uffb4\065\uffb4\066\uffb4\001\002\000\026" +
    "\027\006\037\073\040\060\044\061\045\063\046\067\047" +
    "\071\050\070\051\066\052\057\001\002\000\006\006\uffe0" +
    "\030\uffe0\001\002\000\004\027\006\001\002\000\006\006" +
    "\uffd7\030\uffd7\001\002\000\006\006\uffdb\030\uffdb\001\002" +
    "\000\006\006\uffd9\030\uffd9\001\002\000\006\006\uffd8\030" +
    "\uffd8\001\002\000\014\002\uffff\004\uffff\006\uffff\030\uffff" +
    "\041\uffff\001\002\000\006\006\uffda\030\uffda\001\002\000" +
    "\004\017\172\001\002\000\030\017\100\020\uffd1\032\117" +
    "\036\074\056\077\057\112\060\115\061\111\062\113\063" +
    "\110\064\116\001\002\000\006\006\uffdd\030\uffdd\001\002" +
    "\000\006\020\uffcf\021\uffcf\001\002\000\004\020\201\001" +
    "\002\000\006\020\uffd2\021\177\001\002\000\026\017\100" +
    "\032\117\036\074\056\077\057\112\060\115\061\111\062" +
    "\113\063\110\064\116\001\002\000\006\020\uffd0\021\uffd0" +
    "\001\002\000\006\006\uffd3\030\uffd3\001\002\000\004\027" +
    "\006\001\002\000\010\006\uffd5\030\uffd5\041\204\001\002" +
    "\000\004\027\006\001\002\000\006\006\uffd6\030\uffd6\001" +
    "\002\000\020\022\023\023\026\024\012\025\010\026\007" +
    "\062\025\065\013\001\002\000\004\062\215\001\002\000" +
    "\006\021\212\030\213\001\002\000\006\021\uffe4\030\uffe4" +
    "\001\002\000\020\022\023\023\026\024\012\025\010\026" +
    "\007\062\025\065\013\001\002\000\010\053\uffe6\062\uffe6" +
    "\066\uffe6\001\002\000\006\021\uffe5\030\uffe5\001\002\000" +
    "\006\021\uffe3\030\uffe3\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\010\005\017\006\015" +
    "\007\020\010\016\011\014\012\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\061\013\063\014\071" +
    "\021\064\001\001\000\002\001\001\000\006\011\055\012" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\026" +
    "\010\016\011\014\012\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\032\001\001\000\020\007\036\010\016\011\014\012" +
    "\013\016\037\017\035\022\034\001\001\000\004\003\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\036\010\016\011\014\012\013\022\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\051\007\020\010\016\011\014\012\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\106\024\105\025\104\026\103\027\102\030\101\031" +
    "\100\032\075\035\113\042\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\023\106\024\105\025\104\026" +
    "\103\027\102\030\101\031\100\032\075\035\113\042\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\106\024\105\025\104\026\103\027\102\030\101\031\100" +
    "\032\075\035\113\042\165\001\001\000\026\023\106\024" +
    "\105\025\104\026\103\027\102\030\101\031\100\032\075" +
    "\035\113\042\164\001\001\000\026\023\106\024\105\025" +
    "\104\026\103\027\102\030\101\031\100\032\075\035\113" +
    "\042\163\001\001\000\026\023\106\024\105\025\104\026" +
    "\103\027\102\030\101\031\100\032\075\035\113\042\161" +
    "\001\001\000\002\001\001\000\026\023\106\024\105\025" +
    "\104\026\103\027\102\030\101\031\100\032\075\035\113" +
    "\042\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\023\155\024\105" +
    "\025\104\026\103\027\102\030\101\031\100\032\075\035" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\030\117\031\100\032\075\035\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\023\133\024\105\025\104\026\103\027\102" +
    "\030\101\031\100\032\075\035\113\001\001\000\002\001" +
    "\001\000\020\025\130\026\103\027\102\030\101\031\100" +
    "\032\075\035\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\026\132\027\102\030\101\031" +
    "\100\032\075\035\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\026\135\027\102\030\101\031\100\032" +
    "\075\035\113\001\001\000\002\001\001\000\016\026\146" +
    "\027\102\030\101\031\100\032\075\035\113\001\001\000" +
    "\002\001\001\000\012\030\145\031\100\032\075\035\113" +
    "\001\001\000\002\001\001\000\014\027\144\030\101\031" +
    "\100\032\075\035\113\001\001\000\002\001\001\000\004" +
    "\034\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\152\024\105\025\104\026\103" +
    "\027\102\030\101\031\100\032\075\035\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\061\021\160\001\001\000\002\001\001\000\004\003\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\172\001\001\000\032\023\106\024\105\025" +
    "\104\026\103\027\102\030\101\031\100\032\075\035\113" +
    "\040\174\041\175\042\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\106\024\105\025\104\026\103\027\102\030\101\031" +
    "\100\032\075\035\113\042\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\202\001\001\000\002\001" +
    "\001\000\004\003\204\001\001\000\002\001\001\000\016" +
    "\007\206\010\016\011\014\012\013\020\210\036\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\206\010\016\011\014\012\013\020\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTs$actions {


  ClaseSemantica sem = new ClaseSemantica();

  private final ConstructorASTs parser;

  /** Constructor */
  CUP$ConstructorASTs$actions(ConstructorASTs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTs$do_action_part00000000(
    int                        CUP$ConstructorASTs$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTs$parser,
    java.util.Stack            CUP$ConstructorASTs$stack,
    int                        CUP$ConstructorASTs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTs$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.prog(bloq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTs$parser.done_parsing();
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVE_APERTURA declaraciones instrucciones LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.bloq(decs, instrs); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones TERMINACION 
            {
              Decs RESULT =null;
		LDecs lista = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.siDecs(lista); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.noDecs(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaraciones",2, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PUNTO_Y_COMA declaracion 
            {
              LDecs RESULT =null;
		LDecs lista = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.muchasDecs(lista, dec); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.unaDec(dec); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= ID_TYPE tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Dec) sem.decType(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= ID_PROC IDENTIFICADOR parametros_formales bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		ParamForms params = (ParamForms)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Dec) sem.decProc(id.str(), params, bloq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Dec) sem.decVar(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaracion",4, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros_formales ::= PARENTESIS_APERTURA lista_parametros_formales_e PARENTESIS_CIERRE 
            {
              ParamForms RESULT =null;
		ParamForms lista = (ParamForms)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = lista; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("parametros_formales",11, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_parametros_formales_e ::= lista_parametros_formales 
            {
              ParamForms RESULT =null;
		LParams lista = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.siParam(lista); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales_e",12, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_parametros_formales_e ::= 
            {
              ParamForms RESULT =null;
		 RESULT = sem.noParam(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales_e",12, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_parametros_formales ::= lista_parametros_formales COMA parametro_formal 
            {
              LParams RESULT =null;
		LParams lista = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		ParamForm param = (ParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.muchosParams(lista, param); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales",13, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_parametros_formales ::= parametro_formal 
            {
              LParams RESULT =null;
		ParamForm param = (ParamForm)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.unParam(param); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros_formales",13, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametro_formal ::= tipo REFERENCIA IDENTIFICADOR 
            {
              ParamForm RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (ParamForm) sem.paramFormRef(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("parametro_formal",16, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_formal ::= tipo IDENTIFICADOR 
            {
              ParamForm RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (ParamForm) sem.paramForm(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("parametro_formal",16, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= T0 
            {
              Tipo RESULT =null;
		Tipo t0 = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = t0; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo",5, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // T0 ::= T0 CORCHETE_APERTURA LITERAL_ENTERO CORCHETE_CIERRE 
            {
              Tipo RESULT =null;
		Tipo t0 = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = (Tipo) sem.tArray(t0, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T0",6, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T0 ::= T1 
            {
              Tipo RESULT =null;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = t1; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T0",6, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T1 ::= INDIRECCION T1 
            {
              Tipo RESULT =null;
		Tipo t1 = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.tPunt(t1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T1",7, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T1 ::= T2 
            {
              Tipo RESULT =null;
		Tipo t2 = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = t2; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T1",7, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T2 ::= ID_INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tInt(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T2 ::= ID_REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tReal(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T2 ::= ID_BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tBool(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T2 ::= ID_STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tString(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T2 ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Tipo) sem.tIden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T2 ::= ID_STRUCT LLAVE_APERTURA lista_campos LLAVE_CIERRE 
            {
              Tipo RESULT =null;
		LCampos campos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.tStruct(campos); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("T2",8, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_campos ::= lista_campos COMA campo 
            {
              LCampos RESULT =null;
		LCampos lista = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.muchosCamps(lista, c); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_campos",28, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_campos ::= campo 
            {
              LCampos RESULT =null;
		Campo c = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.unCamp(c); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_campos",28, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // campo ::= tipo IDENTIFICADOR 
            {
              Campo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Campo) sem.campo(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("campo",14, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones ::= lista_instrucciones 
            {
              Instrs RESULT =null;
		LInstrs lista = (LInstrs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.siInstrs(lista); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instrucciones",9, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= 
            {
              Instrs RESULT =null;
		 RESULT = sem.noInstrs(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instrucciones",9, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_instrucciones ::= lista_instrucciones PUNTO_Y_COMA instruccion 
            {
              LInstrs RESULT =null;
		LInstrs lista = (LInstrs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.muchasInstrs(lista, instr); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_instrucciones ::= instruccion 
            {
              LInstrs RESULT =null;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.unaInstr(instr); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= INI_NOMBRE expresion 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.arrobaInstr(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= ID_CALL IDENTIFICADOR parametros_reales 
            {
              Instr RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		ParamReales param = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Instr) sem.procInstr(id.str(), param).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= ID_NL 
            {
              Instr RESULT =null;
		 RESULT = sem.nlInstr(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= ID_NEW expresion 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.newInstr(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= ID_READ expresion 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.readInstr(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= ID_WRITE expresion 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.writeInstr(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= ID_DELETE expresion 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.deleteInstr(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= ID_WHILE expresion bloque 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.whileInstr(exp, blq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= ID_IF expresion bloque ID_ELSE bloque 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Bloque blqh = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.ifElseInstr(exp, blq, blqh); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= ID_IF expresion bloque 
            {
              Instr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.ifInstr(exp, blq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= bloque 
            {
              Instr RESULT =null;
		Bloque blq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.bloqueInstr(blq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",15, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_reales ::= PARENTESIS_APERTURA lista_expresiones_e PARENTESIS_CIERRE 
            {
              ParamReales RESULT =null;
		ParamReales lista = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = lista; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("parametros_reales",29, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lista_expresiones_e ::= lista_expresiones 
            {
              ParamReales RESULT =null;
		LExp lista = (LExp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.siExp(lista); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones_e",30, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // lista_expresiones_e ::= 
            {
              ParamReales RESULT =null;
		 RESULT = sem.noExp(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones_e",30, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              LExp RESULT =null;
		LExp lista = (LExp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.muchasExp(lista, exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones",31, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // lista_expresiones ::= expresion 
            {
              LExp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.unaExp(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones",31, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= E0 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e0; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("expresion",32, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E1 ASIGNACION E0 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.asignacion(e1, e0).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e1; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.mkop1(op.str(), e1, e2).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e2; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.suma(e2, e3).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		Exp e3a = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e3b = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.resta(e3a, e3b).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e3; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E3 ::= E4 ID_AND E3 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.and(e4, e3).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E4 ID_OR E4 
            {
              Exp RESULT =null;
		Exp e41 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e42 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.or(e41, e42).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e4; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.mkop4(op.str(), e4, e5).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e5; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= OP5 E5 
            {
              Exp RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.mkop5(op.str(), e5).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e6; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= E6 CORCHETE_APERTURA E0 CORCHETE_CIERRE 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		StringLocalizado ca = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = (Exp) sem.array(e6, e0).ponFila(ca.fila()).ponCol(ca.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= E6 PUNTO IDENTIFICADOR 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.expCampo(e6, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E6 ::= E6 INDIRECCION 
            {
              Exp RESULT =null;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.punt(e6).ponFila(i.fila()).ponCol(i.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = e7; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= LITERAL_REAL 
            {
              Exp RESULT =null;
		StringLocalizado litR = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.litReal(litR.str()).ponFila(litR.fila()).ponCol(litR.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= LITERAL_ENTERO 
            {
              Exp RESULT =null;
		StringLocalizado litE = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.litEnt(litE.str()).ponFila(litE.fila()).ponCol(litE.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= LITERAL_CADENA 
            {
              Exp RESULT =null;
		StringLocalizado litC = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem.litCad(litC.str()).ponFila(litC.fila()).ponCol(litC.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem._true(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem._false(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E7 ::= ID_NULL 
            {
              Exp RESULT =null;
		StringLocalizado nul = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp) sem._null().ponFila(nul.fila()).ponCol(nul.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E7 ::= PARENTESIS_APERTURA E0 PARENTESIS_CIERRE 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = e0; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP1 ::= MENOR 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP1 ::= MAYOR 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP1 ::= MENOR_IGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP1 ::= MAYOR_IGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP1 ::= DESIGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP1 ::= IGUAL 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",25, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP4 ::= MULTIPLICACION 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP4",26, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP4 ::= DIVISION 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP4",26, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP4 ::= MODULO 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP4",26, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP5 ::= RESTA 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP5 ::= ID_NOT 
            {
              StringLocalizado RESULT =null;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP5",27, RESULT);
            }
          return CUP$ConstructorASTs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTs$do_action(
    int                        CUP$ConstructorASTs$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTs$parser,
    java.util.Stack            CUP$ConstructorASTs$stack,
    int                        CUP$ConstructorASTs$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTs$do_action_part00000000(
                               CUP$ConstructorASTs$act_num,
                               CUP$ConstructorASTs$parser,
                               CUP$ConstructorASTs$stack,
                               CUP$ConstructorASTs$top);
    }
}

